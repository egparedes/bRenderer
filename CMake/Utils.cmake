# ---- Strings ----
#
function(string_concat result_var)
    string(REPLACE ";" "" result_string "${ARGN}")
    set(${result_var} ${result_string} PARENT_SCOPE)
endfunction()


# ---- Lists----
#
function(get_list_header result_var)
    set(the_list ${ARGN} " ")
    list(LENGTH the_list args_size)
    if(${args_size} GREATER 0)
        list(GET the_list 0 head)
        set(${result_var} ${head} PARENT_SCOPE)
    else()
        set(${result_var} "" PARENT_SCOPE)
    endif()
endfunction()

function(is_list_header_equal result_var compare_value)
    get_list_header(head ${ARGN})
    if(DEFINED head AND ${head} STREQUAL ${compare_value})
        set(${result_var} TRUE PARENT_SCOPE)
    else()
        set(${result_var} FALSE PARENT_SCOPE)
    endif()
endfunction()

function(list_to_string result_var separator)
    string(REPLACE ";" "${separator}" result_string "${ARGN}")
    set(${result_var} ${result_string} PARENT_SCOPE)
endfunction()


# ---- Files----
#
## copy_file_hierarchy()
##   Example:
##     copy_file_hierarchy(/home/user/data/ /tmp *.jpg *.png *.mov)
##
function(copy_file_hierarchy src_root dest_root)
    #message(STATUS "src_root: ${src_root}")
    #message(STATUS "dest_root: ${dest_root}")
    set(glob_expressions "")  # Glob expressions are placed in extra args
    foreach(arg ${ARGN})
        list(APPEND glob_expressions "${arg}")
    endforeach()
    #message("glob_expressions = ${glob_expressions}")

    file(GLOB_RECURSE file_list RELATIVE ${src_root} ${glob_expressions})
    foreach(f_item ${file_list})
        if(NOT ${f_item} MATCHES "\\.\\./.*")
            get_filename_component(subtree ${f_item} DIRECTORY)
            get_filename_component(name ${f_item} NAME)
            set(dest_dir "${dest_root}/${subtree}")
            set(dest_file "${dest_root}/${subtree}/${name}")
            set(src_file "${src_root}/${subtree}/${name}")
            #message(STATUS "copy ${src_file} ${dest_file}")
            execute_process(COMMAND ${CMAKE_COMMAND} -E make_directory ${dest_dir})
            execute_process(COMMAND ${CMAKE_COMMAND} -E copy ${src_file} ${dest_file})
        endif()
    endforeach()


endfunction()

## get_dirs_with_files()
##   Example:
##     get_dirs_with_files(return_var /home/user/data/ *.jpg *.png *.mov)
##
function(get_dirs_with_files return_list_var base_dir)
    set(glob_expressions "")  # Glob expressions are placed in extra args
    foreach(arg ${ARGN})
        list(APPEND glob_expressions "${arg}")
    endforeach()

    if(base_dir)
        file(GLOB_RECURSE new_list RELATIVE ${base_dir} ${glob_expressions})
    else()
        file(GLOB_RECURSE new_list ${glob_expressions})
    endif()
    #message("GLOB_RECURSE Done!!")
    set(dir_list "")
    foreach(file_path ${new_list})
        get_filename_component(dir_path ${file_path} PATH)
        list(APPEND dir_list ${dir_path})
        list(REMOVE_DUPLICATES dir_list)
    endforeach()
    set(${return_list_var} ${dir_list} PARENT_SCOPE)
endfunction()


# ---- Sources ----
#
function(configure_sources input_folder)
    #message(STATUS "input_folder: ${input_folder}")
    set(AUTOGENERATION_WARNING_MASTER "
    /******************************************************************************
     * AUTO-GENERATION WARNING:
     *     This file has been automatically generated from the template file:
     *         \"<INPUT_FILE>\"
     *
     *     DO NOT edit this file, as any changes will be automatically discarded.
     *     If you need to change something, change the template instead.
     *
     * Instructions for setting configuration dependent values:
     *
     *      CMake: set(PROJECT_VAR_XXXX value_yyyy)
     *
     *      Template file: \@PROJECT_VAR_XXXX\@
     *
     *      Example: #define PROJECT_DEFINE_XXXX \@PROJECT_VAR_XXXX\@
     *
     ******************************************************************************/
    ")
    file(GLOB_RECURSE config_list ${input_folder}/*.in)
    foreach(config_input_file ${config_list})
        string(REPLACE ".in" "" config_output_file "${config_input_file}")
        string(REPLACE "<INPUT_FILE>" "${config_input_file}" AUTOGENERATION_WARNING "${AUTOGENERATION_WARNING_MASTER}")
        configure_file("${config_input_file}" "${config_output_file}")
    endforeach()
endfunction()

# ---- Compilers ----
# -- C
## Supported options:
##   O0 O1 O2 O3
##   no-warnings no-sign-compare no-unused-warnings all-warnings
##   fPIC
##
function(get_cc_options flags_var)
    set(flags "")
    foreach(arg ${ARGN})
        set(new_flag "")
        if(arg STREQUAL "O0")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-O0")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(new_flag "/Od")
            endif()

        elseif(arg STREQUAL "O1")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-O1")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(new_flag "/O1")
            endif()

        elseif(arg STREQUAL "O2")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-O2")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(new_flag "/O2")
            endif()

        elseif(arg STREQUAL "O3")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
                set(new_flag "-O3")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-O2")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(new_flag "/Ox")
            endif()

        elseif(arg STREQUAL "no-warnings")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-w")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(new_flag "/W0")
            endif()

        elseif(arg STREQUAL "no-sign-compare")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-Wno-sign-compare")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                # Ref: https://msdn.microsoft.com/en-us/library/y92ktdf2.aspx
                set(new_flag "/wd4018")
            endif()

        elseif(arg STREQUAL "no-unused-warnings")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-Wno-unused")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                # Ref: http://msdn.microsoft.com/en-us/library/18kcz36b(v=vs.110).aspx
                set(new_flag "/wd4100" "/wd4101")
            endif()

        elseif(arg STREQUAL "all-warnings")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-Wall")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
                set(new_flag "/Wall")
            endif()

        elseif(arg STREQUAL "fPIC")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-fPIC")
            endif()

        endif()
        set(flags "${flags} ${new_flag}")
        #message("C compiler setting ${arg}: '${new_flag}'")
    endforeach()
    #message("C compiler options: ${flags}")
    set(${flags_var} ${flags} PARENT_SCOPE)
endfunction()


# -- C++
## Supported options:
##   c++11
##   O0 O1 O2 O3
##   no-c++11-warnings no-warnings no-sign-compare no-unused-warnings all-warnings
##   fPIC
##
function(get_cpp_options flags_var)
    set(flags "")
    foreach(arg ${ARGN})
        set(new_flag "")
        if(arg STREQUAL "c++11")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
                set(new_flag "-std=c++11")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-std=gnu++11")
            endif()

        elseif(arg STREQUAL "O1" OR arg STREQUAL "O2" OR arg STREQUAL "O3")
            get_cc_options(new_flag ${arg})

        elseif(arg STREQUAL "no-c++11-warnings")
            if(CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR
              CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
                set(new_flag "-Wno-c++11-extensions")
            elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
                set(new_flag "-Wno-c++11-compat")
            endif()
        elseif(arg STREQUAL "no-warnings" OR arg STREQUAL "no-unused-warnings" OR
               arg STREQUAL "no-sign-compare" OR arg STREQUAL "all-warnings")
            get_cc_options(new_flag ${arg})

        elseif(arg STREQUAL "fPIC")
            get_cc_options(new_flag ${arg})

        endif()
        set(flags "${flags} ${new_flag}")
        #message("C++ compiler setting ${arg}: '${new_flag}'")
    endforeach()
    #message("C++ compiler options: ${flags}")
    set(${flags_var} "${flags}" PARENT_SCOPE)
endfunction()


# ---- Print info ----
#
function(print_cmake_info)
    message("\n---- CMake variables ----")
    message("CMAKE_VERSION: ${CMAKE_VERSION}")
    message("CMAKE_SYSTEM: ${CMAKE_SYSTEM}")
    message("CMAKE_SYSTEM_NAME: ${CMAKE_SYSTEM_NAME}")
    message("CMAKE_SYSTEM_VERSION: ${CMAKE_SYSTEM_VERSION}")
    message("CMAKE_SYSTEM_PROCESSOR: ${CMAKE_SYSTEM_PROCESSOR}")
    message("CMAKE_LIBRARY_ARCHITECTURE: ${CMAKE_LIBRARY_ARCHITECTURE}")
    message("CMAKE_CXX_LIBRARY_ARCHITECTURE: ${CMAKE_CXX_LIBRARY_ARCHITECTURE}")
    message("CMAKE_LIBRARY_ARCHITECTURE_REGEX: ${CMAKE_LIBRARY_ARCHITECTURE_REGEX}")
    message("CMAKE_GENERATOR: ${CMAKE_GENERATOR}")
    message("CMAKE_PREFIX_PATH:${CMAKE_PREFIX_PATH}")
    message("CMAKE_SOURCE_DIR:${CMAKE_SOURCE_DIR}")
    message("CMAKE_BINARY_DIR:${CMAKE_BINARY_DIR}")
    message("CMAKE_INSTALL_PREFIX:${CMAKE_INSTALL_PREFIX}")
endfunction()

function(print_compiler_info)
    message("\n---- Compiler variables ----")
    message("\n---- Windows ----")
    message("WIN32: ${WIN32}")
    message("MSVC: ${MSVC}")
    message("MSVC_IDE: ${MSVC_IDE}")
    message("MSVC_VERSION: ${MSVC_VERSION}")
    message("MSVC60: ${MSVC60}")
    message("MSVC70: ${MSVC70}")
    message("MSVC71: ${MSVC71}")
    message("MSVC80: ${MSVC80}")
    message("CMAKE_COMPILER_2005: ${CMAKE_COMPILER_2005}")
    message("MSVC90: ${MSVC90}")
    message("MSVC10: ${MSVC10}")
    message("MSVC11: ${MSVC11}")
    message("MSVC12: ${MSVC12}")
    message("\n---- Unix ----")
    message("UNIX: ${UNIX}")
    message("MINGW: ${MINGW}")
    message("MSYS: ${MSYS}")
    message("CYGWIN: ${CYGWIN}")
    message("CMAKE_COMPILER_IS_GNUCC: ${CMAKE_COMPILER_IS_GNUCC}")
    message("CMAKE_COMPILER_IS_GNUCXX: ${CMAKE_COMPILER_IS_GNUCXX}")
    message("\n---- Apple ----")
    message("APPLE: ${APPLE}")
    if(${APPLE})
        message("XCODE_VERSION: ${XCODE_VERSION}")
        message("CMAKE_OSX_SYSROOT: ${CMAKE_OSX_SYSROOT}")
        message("CMAKE_OSX_DEPLOYMENT_TARGET: ${CMAKE_OSX_DEPLOYMENT_TARGET}")
        message("CMAKE_OSX_ARCHITECTURES: ${CMAKE_OSX_ARCHITECTURES}")
        message("CMAKE_XCODE_EFFECTIVE_PLATFORMS: ${CMAKE_XCODE_EFFECTIVE_PLATFORMS}")
        message("CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD: ${CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LANGUAGE_STANDARD}")
        message("CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY: ${CMAKE_XCODE_ATTRIBUTE_CLANG_CXX_LIBRARY}")
    endif()

    message("\n---- Misc ----")
    message("BORLAND: ${BORLAND}")
endfunction()

function(print_project_info)
    message("\n---- Project variables ----")
    message("PROJECT_PREFIX_PATH:${PROJECT_PREFIX_PATH}")
    message("PROJECT_SOURCE_DIR:${PROJECT_SOURCE_DIR}")
    message("PROJECT_BINARY_DIR:${PROJECT_BINARY_DIR}")
endfunction()

function(print_info)
    print_cmake_info()
    print_compiler_info()
    print_project_info()
endfunction()


# ---- Messages ----
#
if(NOT WIN32)
    string(ASCII 27 Esc)
    set(ColourReset "${Esc}[m")
    set(ColourBold  "${Esc}[1m")
    set(Red         "${Esc}[31m")
    set(Green       "${Esc}[32m")
    set(Yellow      "${Esc}[33m")
    set(Blue        "${Esc}[34m")
    set(Magenta     "${Esc}[35m")
    set(Cyan        "${Esc}[36m")
    set(White       "${Esc}[37m")
    set(BoldRed     "${Esc}[1;31m")
    set(BoldGreen   "${Esc}[1;32m")
    set(BoldYellow  "${Esc}[1;33m")
    set(BoldBlue    "${Esc}[1;34m")
    set(BoldMagenta "${Esc}[1;35m")
    set(BoldCyan    "${Esc}[1;36m")
    set(BoldWhite   "${Esc}[1;37m")
endif()

function(cmessage)
    list(GET ARGV 0 Color)
    list(REMOVE_AT ARGV 0)
    if(${Color} STREQUAL Red OR ${Color} STREQUAL BoldRed
       OR ${Color} STREQUAL Green OR ${Color} STREQUAL BoldGreen
       OR ${Color} STREQUAL Yellow OR ${Color} STREQUAL BoldYellow
       OR ${Color} STREQUAL Blue OR ${Color} STREQUAL BoldBlue
       OR ${Color} STREQUAL Magenta OR ${Color} STREQUAL BoldMagenta
       OR ${Color} STREQUAL Cyan OR ${Color} STREQUAL BoldCyan
       OR ${Color} STREQUAL White OR ${Color} STREQUAL BoldWhite
       AND NOT WIN32)
         message(STATUS "${${Color}}${ARGV}${ColourReset}")
    else()
        message(STATUS "${ARGV}")
    endif()
endfunction()
